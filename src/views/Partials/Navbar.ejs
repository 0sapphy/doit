<nav class="bg-gray-800">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="relative flex items-center justify-between h-16">
      <div class="flex items-center">
        <a href="/" class="flex items-center">
          <svg id="logo-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 20" class="h-8 w-auto text-white fill-current">
            <text x="0" y="15" font-size="14" font-family="Arial, sans-serif" font-weight="bold">DOIT</text>
          </svg>
        </a>
      </div>
      <div class="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
        <div class="relative">
          <button id="notification-btn" type="button" class="bg-gray-800 p-1 rounded-full text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white">
            <span class="sr-only">View notifications</span>
            <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V4a2 2 0 10-4 0v1.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0a3 3 0 11-6 0h6z" />
            </svg>
          </button>
          <span id="notification-indicator" class="hidden absolute top-0 right-0 h-2 w-2 bg-red-500 rounded-full"></span>
        </div>
        <% if (user) { %>
          <a href="/profile" class="ml-4">
            <img src="https://media.discordapp.net/avatars/<%= user.discordId %>/<%= user.avatar %>" alt="User Avatar" class="h-8 w-8 rounded-full border-2 border-gray-300 hover:border-gray-400">
          </a>
        <% } else { %>
          <a href="/auth/discord" class="bg-blue-500 text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-blue-600 ml-4">Login</a>
        <% } %>
      </div>
    </div>
  </div>

  <div id="notification-modal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50">
    <div id="notification-modal-content" class="bg-white rounded-lg shadow-lg max-w-lg w-full p-6 transform scale-95 opacity-0 transition-all duration-300">
      <h2 class="text-lg font-bold mb-4">Notifications</h2>
      <ul id="notification-list" class="space-y-2 max-h-64 overflow-y-auto"></ul>
      <p id="no-notifications-message" class="text-gray-500 text-center hidden">No notifications available.</p>
      <button id="close-modal" class="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Close</button>
    </div>
  </div>

  <div class="sm:hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1">
      <a href="/" class="text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium">Home</a>
      <a href="/about" class="text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium">About</a>
    </div>
  </div>
</nav>

<script>
  document.addEventListener("DOMContentLoaded", async () => {
    anime({
      targets: '#logo-svg text',
      translateY: [-10, 0],
      opacity: [0, 1],
      easing: 'easeOutExpo',
      duration: 1500,
      delay: anime.stagger(100),
    });

    const notificationBtn = document.getElementById("notification-btn");
    const notificationModal = document.getElementById("notification-modal");
    const notificationModalContent = document.getElementById("notification-modal-content");
    const closeModal = document.getElementById("close-modal");
    const notificationIndicator = document.getElementById("notification-indicator");
    const notificationList = document.getElementById("notification-list");
    const noNotificationsMessage = document.getElementById("no-notifications-message");

    if (!notificationBtn || !notificationModal || !closeModal || !notificationIndicator || !notificationList || !noNotificationsMessage) {
      return;
    }

    notificationBtn.addEventListener("click", () => {
      notificationModal.classList.remove("hidden");
      setTimeout(() => {
        notificationModalContent.classList.remove("scale-95", "opacity-0");
        notificationModalContent.classList.add("scale-100", "opacity-100");
      }, 10);
    });

    function closeNotificationModal() {
      notificationModalContent.classList.remove("scale-100", "opacity-100");
      notificationModalContent.classList.add("scale-95", "opacity-0");
      setTimeout(() => {
        notificationModal.classList.add("hidden");
      }, 300);
    }

    closeModal.addEventListener("click", () => {
      closeNotificationModal();
    });

    notificationModal.addEventListener("click", (event) => {
      if (event.target === notificationModal) {
        closeNotificationModal();
      }
    });

    let notifications = [];
    try {
      const response = await fetch('/api/notifications');
      if (response.ok) {
        notifications = await response.json();
      }
    } catch (error) {}

    const storedReadStatus = JSON.parse(localStorage.getItem("readNotifications")) || {};
    notifications.forEach((notification) => {
      if (storedReadStatus[notification.id]) {
        notification.read = true;
      }
    });

    if (notifications.length === 0) {
      noNotificationsMessage.classList.remove("hidden");
    } else {
      notifications.forEach((notification) => {
        const notificationItem = document.createElement("li");
        notificationItem.className = `text-gray-700 ${notification.read ? "opacity-50" : ""} flex justify-between items-center transition-all duration-300`;
        notificationItem.innerHTML = `
          <span>${notification.message}</span>
          <button class="text-blue-500 hover:underline text-sm mark-read-btn" data-id="${notification.id}">
            ${notification.read ? "Read" : "Mark as Read"}
          </button>
        `;
        notificationList.appendChild(notificationItem);
      });
    }

    notificationList.addEventListener("click", (event) => {
      if (event.target.classList.contains("mark-read-btn")) {
        const notificationId = parseInt(event.target.getAttribute("data-id"), 10);
        const notification = notifications.find((n) => n.id === notificationId);
        if (notification && !notification.read) {
          notification.read = true;
          event.target.textContent = "Read";
          event.target.parentElement.classList.add("opacity-50");

          storedReadStatus[notificationId] = true;
          localStorage.setItem("readNotifications", JSON.stringify(storedReadStatus));

          updateNotificationIndicator();
        }
      }
    });

    function updateNotificationIndicator() {
      const hasUnread = notifications.some((n) => !n.read);
      if (hasUnread) {
        notificationIndicator.classList.remove("hidden");
      } else {
        notificationIndicator.classList.add("hidden");
      }
    }

    updateNotificationIndicator();
  });
</script>
